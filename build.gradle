import org.json.XML
import org.json.JSONObject

buildscript {
    ext.kotlin_version = "1.4.32"
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.3"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.json:json:20210307'
    }
}

allprojects { Project project ->
    repositories {
        google()
        mavenCentral()
    }
    ext.mavenPublishFolder = {
        apply plugin: 'maven-publish'
        project.afterEvaluate {
            def folder = new File(rootProject.projectDir, "injected")
            publishing {
                if (project.hasProperty('privateRepository')) repositories.with(privateRepository)//support publish to private nexus
                publications {
                    folder.listFiles().each { File depFolder ->
                        def injectedPom = depFolder.listFiles().find { it.name.endsWith('.pom') }
                        def injectedArtifact = depFolder.listFiles().find { it.name.endsWith('.aar') || it.name.endsWith(".jar") }
                        def publicationName = depFolder.name.replace('-', '').replace('.', '')
                        "$publicationName"(MavenPublication) {
                            artifact(injectedArtifact)
                            def json = readPomToJson(injectedPom) as JSONObject
                            groupId = json.optString('groupId')
                            artifactId = json.optString('artifactId')
                            version = json.optString('version')
                            pom {
                                packaging = json.optString('packaging')
                                withXml {
                                    def dependenciesNode = asNode().appendNode('dependencies')
                                    readPomDependencies(injectedPom, { dependenciesNode.appendNode('dependency') })
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    ext.readPomDependencies = { File file, createDependencyNode ->
        def xml = new String(file.readBytes())
        def json = XML.toJSONObject(xml)
        def dependencies = json.getJSONObject("project").getJSONObject("dependencies").getJSONArray("dependency")
        def iterator = dependencies.iterator()
        for (dep in iterator) {
            def d = dep as JSONObject
            def dependencyNode = createDependencyNode()
            if (d.has('groupId')) dependencyNode.appendNode('groupId', d.getString('groupId'))
            if (d.has('artifactId')) dependencyNode.appendNode('artifactId', d.getString('artifactId'))
            if (d.has('version')) dependencyNode.appendNode('version', d.getString('version'))
            if (d.has('type')) dependencyNode.appendNode('type', d.getString('type'))
            if (d.has('scope')) dependencyNode.appendNode('scope', d.getString('scope'))
        }
    }
    ext.readPomToJson = { File file ->
        def xml = new String(file.readBytes())
        def json = XML.toJSONObject(xml)
        json.getJSONObject("project") as JSONObject
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
String.metaClass.quote << { "\"$delegate\"" }

apply from: "https://gitee.com/DonaldDu/OpenGradleScript/raw/master/mavenPublish.gradle"